@app.route('/api/verify', methods=['POST'])
def verify_json():
    """API to verify a signed JSON file."""
    signed_json = request.json

    # Extract signature, public key, and original JSON data
    signer = signed_json.get("signed_by")
    signature_hex = signed_json.pop("signature", None)
    public_key_pem = signed_json.pop("public_key", None)

    if not signature_hex or not public_key_pem:
        return jsonify({'error': 'Missing signature or public key in the JSON.'}), 400

    try:
        signature = bytes.fromhex(signature_hex)
    except ValueError:
        return jsonify({'error': 'Invalid signature format.'}), 400

    # Re-canonicalize the remaining JSON data
    json_string = json.dumps(signed_json, sort_keys=True)

    # Load the public key
    try:
        public_key = serialization.load_pem_public_key(public_key_pem.encode())
    except Exception as e:
        return jsonify({'error': f'Failed to load public key: {str(e)}'}), 500

    # Verify the signature
    try:
        public_key.verify(
            signature,
            json_string.encode(),
            padding.PSS(
                mgf=padding.MGF1(hashes.SHA256()),
                salt_length=padding.PSS.MAX_LENGTH
            ),
            hashes.SHA256()
        )
        return jsonify({'message': f'Signature is valid. Signed by {signer}.'}), 200
    except Exception as e:
        return jsonify({'error': f'Signature verification failed: {str(e)}'}), 400
